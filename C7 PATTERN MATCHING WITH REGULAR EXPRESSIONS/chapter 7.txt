CHAPTER SEVEN

PATTERN MATCHING WITH REGULAR EXPRESSIONS



1. compiler() is the function that cretes regex objects, it is present in the module re.


2. Raw strings are used when creating regex objects inorder to not avoid backlashes in the string. 
   So that they are not considered as escape characters.


3. If the pattern is found, the search() method returns a Match object.
   If the pattern is not found, it returns None.


4. group() will return the actual matched text from the searched string.  


5. Group 0: covers the entire match.
   Group 1: covers the first set of parentheses.
   Group 2: covers the second set of parentheses.


6. Escape characters like backlash (\. , \, etc) can be used.


7. list of strings:  If pattern includes only one parentheses group.
   list of tuples:  If the pattern includes 2 or more parentheses groups.


8. The | character is called a pipe. It is used to match one of many expressions.


9.  ? basically matches zero or one of the group preceding this question mark.


10. * : match zero or more. The group that precedes the star can occur any number of times in the text
    + : match one or more. The group preceding a plus must appear at least once.


11. {3}: matches exactly three instances of the preceding group
    {3,5}: its like a range with minimum and maximum value. It matches three,four and five instances of preceeding groups in this example.


12. \d: Any numeric digit from 0 to 9.
    \w: Any letter, numeric digit, or the underscore character. 
    \s: Any space, tab, or newline character.


13. \D: Any character that is not a numeric digit from 0 to 9.
    \W: Any character that is not a letter, numeric digit, or the underscore character.
    \S: Any character that is not a space, tab, or newline.


14. .* : greedy match - always try to match as much text as possible.
    .*? : non-greedy match - matches as little text as possible.


15. The [0-9a-z] matches any numbers and lowercase letters.


16. re.IGNORECASE or re.I can be passes as a second argument to re.compile() to regex case insesitive.


17. . : matches any character except for a newline (\n)
    re.DOTALL : the dot will match any character, including newline characters.


18. X drummers, X pipers, five rings, X hens.


19. It allows to ignore whitespace and comments inside the regular expression string.


20. regex = re.compile(r'^\d{1,3}(,\d{3})*$')


21. regex = re.compile(r'^[A-Z][a-z]*\sWatanabe$')


22. regex= re.compile(r'(Alice|Bob|Carol)\s+(eats|pets|throws)\s+(apples|cats|baseballs)\.', re.IGNORECASE)



